openapi: 3.0.0
info:
  title: "HR REST API"
  description: "A HR API for employee details"
  version: "1.0.0"

servers:
  - url: "/api/v1"

components:
  schemas:
    Employee:
      type: "object"
      required:
        - email
      properties:
        id:
          type: "integer"
        first_name:
          type: "string"
        last_name:
          type: "string"
        gender:
          type: "string"
        email:
          type: "string"
        base_salary:
          type: "integer"
    Note:
      type: "object"
      required:
        - employee_id
      properties:
        employee_id:
          type: "integer"
        content:
          type: "string"
  parameters:
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: true
      schema:
        type: "integer"
paths:
  /employees:
    get:
      operationId: "employees.read_all"
      tags:
        - "Employees"
      summary: "See the list of all employees"
      responses:
        "200":
          description: "Successfully read employees list"
    post:
      operationId: "employees.create_employee"
      tags:
        - "Employees"
      summary: "Create an employee"
      requestBody:
        description: "Employee to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "employee"
              $ref: "#/components/schemas/Employee"
      responses:
        "201":
          description: "Successfully created employee"
    put:
      operationId: "employees.update_employee"
      tags:
        - "Employees"
      summary: "Update an employee"
      requestBody:
        description: "Employee to update"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "employee"
              $ref: "#/components/schemas/Employee"
      responses:
        "200":
          description: "Successfully updated employee"
    patch:
      operationId: "employees.patch_employee"
      tags:
        - "Employees"
      summary: "Update an employee"
      requestBody:
        description: "Employee to update"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "employee"
              $ref: "#/components/schemas/Employee"
      responses:
        "200":
          description: "Successfully updated employee"
  /employees/search:
    get:
      operationId: "employees.search_employees"
      tags:
        - "Employees"
      summary: "Search for an employee"
      responses:
        "200":
          description: "Successfully found employee"
        "204":
          description: "Cannot find employee"
      parameters:
        - in: query
          name: first_name
          schema:
            type: string
          description: The first name of the employee
        - in: query
          name: like_first_name
          schema:
            type: string
          description: Wildcard search the first name of the employee
        - in: query
          name: last_name
          schema:
            type: string
          description: The last name of the employee
        - in: query
          name: like_last_name
          schema:
            type: string
          description: Wildcard search the last name of the employee
        - in: query
          name: gender
          schema:
            type: string
          description: The gender of the employee
        - in: query
          name: email
          schema:
            type: string
          description: The email of the employee
        - in: query
          name: base_salary_eq
          schema:
            type: integer
          description: The salary of the employee
        - in: query
          name: base_salary_gte
          schema:
            type: integer
          description: The salary of the employee (greater than or equal to)
        - in: query
          name: base_salary_lte
          schema:
            type: integer
          description: The salary of the employee (less than or equal to)
  /notes:
    post:
      operationId: "notes.create"
      tags:
        - Notes
      summary: "Create a note associated with an employee"
      requestBody:
        description: "Note to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "note"
              type: "object"
              properties:
                employee_id:
                  type: "integer"
                content:
                  type: "string"
      responses:
        "201":
          description: "Successfully created a note"
  /notes/{note_id}:
    get:
      operationId: "notes.read_one"
      tags:
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully read one note"
    put:
      tags:
        - Notes
      operationId: "notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully updated note"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "note"
              type: "object"
              properties:
                content:
                  type: "string"
    delete:
      tags:
        - Notes
      operationId: "notes.delete"
      summary: "Delete a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Successfully deleted note"